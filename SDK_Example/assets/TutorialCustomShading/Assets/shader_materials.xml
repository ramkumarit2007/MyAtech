<?xml version="1.0" encoding="UTF-8"?>
<ShaderMaterials>
	<ShaderMaterial name="tutorial_customshading">
		<Type>
			<!-- Because metaio man has texture with alpha channel (below his feet) -->
			transparent
		</Type>
		<Pass>
			<VertexShader filename="vert.glsl" />
			<FragmentShader filename="frag.glsl" />
		</Pass>
	</ShaderMaterial>
	<ShaderMaterial name="tutorial_customshadingarel">
		<!--
			This shader material is for the AREL tutorial. Since AREL level 13 does not yet support
			setting custom shader constants (coming very soon :), a simpler example shader is used.
		-->
		<Type>
			<!-- Because metaio man has texture with alpha channel (below his feet) -->
			transparent
		</Type>
		<Pass>
			<VertexShader>
				#ifdef GL_ES
				precision highp float;
				#endif

				uniform mat4 metaio_mat4_modelViewProjection;

				attribute vec4 inVertex;
				attribute vec2 inTexCoord;

				varying vec2 outTexCoord;

				void main()
				{
					outTexCoord = inTexCoord;
					gl_Position = metaio_mat4_modelViewProjection * inVertex;
				}
			</VertexShader>
			<FragmentShader>
				#ifdef GL_ES
				precision mediump float;
				#endif

				uniform sampler2D metaio_tex_color;

				varying vec2 outTexCoord;

				// Simple and stupid emboss effect
				void main()
				{
					// We know that the texture size is 512x512
					const vec2 onePixelInUV = vec2(1.0 / 512.0);

					const float embossStrength = 4.0;
					vec3 texColor = vec3(0.5);
					texColor -= embossStrength * texture2D(metaio_tex_color, outTexCoord - onePixelInUV).rgb;
					texColor += embossStrength * texture2D(metaio_tex_color, outTexCoord + onePixelInUV).rgb;
					float alpha = texture2D(metaio_tex_color, outTexCoord).a;

					gl_FragColor.rgb = vec3(dot(texColor.rgb, vec3(0.299, 0.587, 0.114)) * alpha); // pre-multiplied alpha!
					gl_FragColor.a = alpha;
				}
			</FragmentShader>
		</Pass>
	</ShaderMaterial>
</ShaderMaterials>